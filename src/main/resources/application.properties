# Es un archivo para la configuración de nuestra aplicación en SpringBoot
# Si quiereramos cambiar el puerto de nuestra aplicación es tan sencillo
# como poner lo siguiente:
# Habrá que detener el servidor.
# 
# DEFAULT: 
# server.port=8080
# server.port=9090

# Si queremos modificar algo del loggin, escribimos lo siguiente:
# Le pasamos el nivel de manejo de loggin...
# Por ejemplo le pasamos DEBUG, aunque si le pasamos esto, va a ser demaciada
# información la que se va a enviar a nuestro archivo de loggin.
# Pasarle INFO, es la configuración por default.
# 
# logging.level.root=DEBUG
# logging.level.root=INFO
#
# También podríamos modificar el nivel del paquete
# loggin.level.nombre_de_nuestro_paquete
# Y podríamos poder esté paquete únicamente a nivle DEBUG
#
# logging.leve.mx.com.luis=DEBUG
# 
# Con la línea de arriba podríamos colocar dentro de nuestros métodos de
# control como si hicieramos la petición / y dentro de ese método colocar
# el método:
#
# log.debug("Más detalle del controlador");

# También podemos configurar la fecha en nuestro log
# Para mandar únicamente hora y minuto, en lugar de mandar toda la fecha.
#
logging.pattern.dateformat=hh:mm
#
# Así que únicamente estaremos viendo la hora con minutos en nuetro log.

# Para quitar más información innecesaria que se manda a nuestro log
spring.main.banner-mode=off

#Agregamos una configuración ya que
#la tecnología de Thymeleaf hace Caché de manera automática de la información
#que mandamos al navegador, esto para que cuando estemos trabajando en desarrollo
#cuando estemos creando nuestra aplicación no tengamos problemas para visualizar
#los cambios de nuestra aplicación.
spring.thymeleaf.cache=false

# Aquí también podemos añadir un mensaje directo a nuestra vista
index.saludoProperties=Saludos desde application.properties

# MySQL Conexion ---------------------------------------------------------------
# Aquí es donde se va a configurar la conexión a la base de datos.

# Agregamos el conector, el host, la base de datos.
# Sin embargo, necesitamos agregar algunos parametros si estamos utiliando la
# versión 8 de MySQL. Ya que si no, no nos permitira conectarnos a la DB.
# Debemos respetar mayúsculas y minúsculas, cualquier error no nos permitira
# la conexión.
# Agregamos: ?useSSL=false, &serverTimezone=UTC, (Agregamos la llave para que nos
# podamos conectar a la base de MySQL sin ningún problema. Ya que es un paramétro
# que también debemos configurar para que nos podamos conectar a la base de datos
# de MySQL) &allowPublicKeyRetrival=true
spring.datasource.url=jdbc:mysql://localhost/test?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrival=true
# También agregamos nustras credenciales a la base de datos (DB).
spring.datasource.username=root
spring.datasource.password=admin1234
# Agregamos la Clase del Driver de MySQL que se va a utilizar para crear la 
# conexión a la base de datos.
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Ahora vamos a indicar cual va a ser la plataforma que vamos a utilizar para
# conectarnos a la base de datos pero indicandoselo a JPA. Ya que también a 
# JPA le vamos a indicar cuál va a ser el diálecto que vamos a utilizar, es decir,
# la base de datos con la cuál nos vamos a comunicar.
# Y dependiendo de la versión de MySQL que estemos utilizando este dialecto 
# puede cambiar, ya que en este caso es la versión 8 que estamos utilizando, pero
# si utilizamos otras versiones (anteriores) debemos de buscar su dialecto.
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# Mostrar SQL por Consola-------------------------------------------------------

# Hasta aquí ya sería suficiente para podernos conectar a la base de datos, 
# sin embargo también podemos mandar a consola las sentencias SQL que se están
# ejecutando, así que agregamos los siguientes parametros.
# Para mostrar el SQL que se está ejecutando.
# Este paramétro es para que se muestre de manera formateada.
spring.jpa.properties.hibernate.format_sql=true

# Porque estamos involucrando a Hibernate, lo que sucede es que cuando estamos
# utiliznado JPA Spring por default la implementación que va a uitilizar JPA es
# Hibernate, si quieramos utilizar otra implemenación como Eclipse Link, JPA u
# otro tipo de implementación entonces se tiene que especificar en el archivo
# POM.xml y además realizar las configuraciones necesarias para que pueda 
# conectarse correctamente utilizando otro tipo de implementación. Pero en este
# caso la implementación por default es Hibernate. Así que por ello vamos a ver
# algunas configuraciones de Hibernate.

# Sin embargo, a diferiencia de algún curso de Hibernate ya no es necesario
# especificar el archivo persistance.xml de manera explicita, todo esto lo va a
# organizar y administrar Spring Boot de manera automática.
# Así que se va a crear de manera automática la unidad de persistencia y se va a
# inyectar a los objetos de tipo DAO que vamos a crear.

# Ahora vamos a terminar de configrar este loggin.
# Para que se muestre la consulta SQL que se está ejecutando.
logging.level.org.hibernate.SQL=DEBUG
# Por últmo agregamos esto para indicar que se muestren también los paramétros
# que vamos a mostrar en las sentencias SQL. Para qe los podamos visualizar.
# Sin embargo, si queremos visualizar los parametros debemos desabilitar la 
# opción de formateo (que esta arriba de esta anterior). Ya que si la tenemos
# habilidata y se le da formato a la sentencia que se ejecuta entonces no se
# visualizaran los parametros, por lo que debemos desabilitar esa opción.
# TRACE es en nivel más básico.
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
# Ya de nosotros dependerá como colocamos estos cambios en relación a la 
# información que queremos que se muestre en la consola
# Para finalizar hay que hacer un Clean and Build de nuestro proyecto.